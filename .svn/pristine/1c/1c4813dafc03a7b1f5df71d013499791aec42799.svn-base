package Lukio;

import fi.jyu.mit.ohj2.Mjonot;
import java.io.*;
import java.util.Comparator;

import static kanta.HetuTarkistus.*;

/**
 * Lukion oppilas, joka osaa huolehtia mm. id:staan, osoitteestaan.
 * @author majuhama ja laolkorh
 * matias.j.hamalainen@student.jyu.fi, lassi.o.korhonen@student.jyu.fi
 * @version 25.2.2016
 */
public class Oppilas {

	private int oid;
	private String nimi = "";
	private String hetu = "";
	private String katuosoite = "";
	private String postinumero = "";
	private String postiosoite = "";
	private String puhelinnumero = "";
	private int aloitusvuosi = 0;
	private String sahkoposti = "";
	
	private static int seuraavaNro    = 1;
	
	/**
     * Luokka joka vertaa kahta oppilasta keskenään 
     */
    public static class Vertailija implements Comparator<Oppilas> {

        private final int kenttanro;


        /**
         * Alustetaan vertailija vertailemaan tietyn kentän perusteella
         * @param k vertailtavan kentän indeksi.
         */
        public Vertailija(int k) {
            this.kenttanro = k;
        }


        /**
         * Verrataana kahta oppilasta keskenään.
         * @param o1 1. verrattava jäsen
         * @param o2 2. verrattava jäsen
         * @return <0 jos o1 < o2, == 0 jos o1 == o2 ja muuten >0
         */
        @Override
        public int compare(Oppilas o1, Oppilas o2) {
            String s1 = o1.getAvain(kenttanro);
            String s2 = o2.getAvain(kenttanro);

            return s1.compareTo(s2);

        }

    }
	
	/**
     * Palauttaa oppilaan kenttien lukumäärän
     * @return kenttien lukumäärä
     */
    public int getKenttia() {
        return 9;
    }


    /**
     * Antaa k-kentän sisällön
     * @param k kentän indeksi
     * @return kentän sisältö merkkijonona
     */
    public String getAvain(int k) {
    	switch ( k ) {
    case 0:
        return "" + oid;
    case 1:
        return "" + nimi;
    case 2:
        return "" + hetu;
    case 3:
    	return "" + aloitusvuosi;
    case 4:
        return "" + katuosoite;
    case 5:
        return "" + postinumero;
    case 6:
        return "" + postiosoite;
    case 7:
        return "" + sahkoposti;
    case 8:
        return "" + puhelinnumero;
    
    default:
        return "Ayy lmao";
    }
    }



	/**
     * Eka kenttä joka on mielekäs kysyttäväksi
     * @return ekan kentän indeksi
     */
    public int ekaKentta() {
        return 1;
    }
    
    /**
     * Asettaa k:n kentän arvoksi parametrina tuodun merkkijonon arvon
     * @param k kuinka monennen kentän arvo asetetaan
     * @param jono jono, joka asetetaan kentän arvoksi
     * @return null jos asettaminen onnistuu, muuten vastaava virheilmoitus.
     */
    public String aseta(int k, String jono) {
        String tjono = jono.trim();
        StringBuffer sb = new StringBuffer(tjono);
        switch ( k ) {
        case 0:
            setId(Mjonot.erota(sb, '§', getId()));
            return null;
        case 1:
            nimi = tjono;
            return null;
        case 2:
            kanta.HetuTarkistus hetut = new kanta.HetuTarkistus();
            String virhe = hetut.tarkista(tjono);
            if ( virhe != null ) return virhe;
            hetu = tjono;
            return null;
        case 3:
        	try{
        	aloitusvuosi = Mjonot.erotaEx(sb, '§', aloitusvuosi);
        } catch ( NumberFormatException ex ) {
            return "Aloitusvuosi väärin " + ex.getMessage();
        }
        	return null;
        case 4:
            katuosoite = tjono;
            return null;
        case 5:
            postinumero = tjono;
            return null;
        case 6:
            postiosoite = tjono;
            return null;
        case 7:
            sahkoposti = tjono;
            return null;
        case 8:
            puhelinnumero = tjono;
            return null;
        
        default:
            return "Ayy lmao";
        }
    }
    
    /**
     * Antaa k:n kentän sisällön merkkijonona
     * @param k monenenko kentän sisältö palautetaan
     * @return kentän sisältö merkkijonona
     */
    public String anna(int k) {
        switch ( k ) {
        case 0:
            return "" + oid;
        case 1:
            return "" + nimi;
        case 2:
            return "" + hetu;
        case 3:
        	return "" + aloitusvuosi;
        case 4:
            return "" + katuosoite;
        case 5:
            return "" + postinumero;
        case 6:
            return "" + postiosoite;
        case 7:
            return "" + sahkoposti;
        case 8:
            return "" + puhelinnumero;
        
        default:
            return "Ayy lmao";
        }
    }
    
    /**
     * Palauttaa k:tta oppilaan kenttää vastaavan kysymyksen
     * @param k kuinka monennen kentän kysymys palautetaan (0-alkuinen)
     * @return k:netta kenttää vastaava kysymys
     */
    public String getKysymys(int k) {
        switch ( k ) {
        case 0:
            return "Id";
        case 1:
            return "nimi";
        case 2:
            return "hetu";
        case 3:
        	return "aloitusvuosi";
        case 4:
            return "katuosoite";
        case 5:
            return "postinumero";
        case 6:
            return "postiosoite";
        case 7:
            return "sähköposti";
        case 8:
            return "puhelinnumero";
        
        default:
            return "Ayy lmao";
        }
    }

	
	/**
     * @return oppilaan nimi
     * @example
     * <pre name="test">
     *   Oppilas pertti = new Oppilas();
     *   pertti.vastaaAkuAnkka();
     *   pertti.getNimi() =R= "Ankka Aku .*";
     * </pre>
     */
    public String getNimi() {
        return nimi;
    }
    
    /**
     * Tulostetaan henkilön tiedot
     * @param os tietovirta johon tulostetaan
     */
    public void tulosta(OutputStream os) {
        tulosta(new PrintStream(os));
    }
    
    /**
     * Tulostetaan henkilön tiedot
     * @param out tietovirta johon tulostetaan
     */
    public void tulosta(PrintStream out) {
        out.println(String.format("%03d", oid, 3) + "  " + nimi + "  " + hetu);
        out.println("  Osoite: " + katuosoite + "  " + postinumero + " " + postiosoite);
        out.println("  Puhelin: " + puhelinnumero);
        out.println("  Sposti: " + sahkoposti);
        out.println("  Aloittanut " + aloitusvuosi + ".");
        
    }


    
    /**
     * Apumetodi, jolla saadaan täytettyä testiarvot jäsenelle.
     * @param apuhetu hetu joka annetaan henkilölle 
     */
    public void vastaaAkuAnkka(String apuhetu) {
        nimi = "Ankka Aku " + rand(1000, 9999);
        hetu = apuhetu;
        katuosoite = "Ankkakuja 6";
        postinumero = "12345";
        postiosoite = "ANKKALINNA";
        puhelinnumero = "12-1234";
        aloitusvuosi = 1996;
        sahkoposti = "aku.ankka@ankka24.fi";
        
    }


    /**
     * Apumetodi, jolla saadaan täytettyä testiarvot jäsenelle.
     * Henkilötunnus arvotaan, jotta kahdella jäsenellä ei olisi
     * samoja tietoja.
     */
    public void vastaaAkuAnkka() {
        String apuhetu = arvoHetu();
        vastaaAkuAnkka(apuhetu);
    }
    
    /**
     * Antaa oppilaalle seuraavan rekisterinumeron.
     * @return oppilaan uusi oid
     * @example
     * <pre name="test">
     *   Oppilas aku1 = new Oppilas();
     *   aku1.getId() === 0;
     *   aku1.rekisteroi();
     *   Oppilas aku2 = new Oppilas();
     *   aku2.rekisteroi();
     *   int n1 = aku1.getId();
     *   int n2 = aku2.getId();
     *   n1 === n2-1;
     * </pre>
     */
    public int rekisteroi() {
        oid = seuraavaNro;
        seuraavaNro++;
        return oid;
    }


    /**
     * Palauttaa oppilaan id:n.
     * @return oppilaan id
     */
    public int getId() {
        return oid;
    }
    
    /**
     * Palauttaa oppilaan tiedot merkkijonona jonka voi tallentaa tiedostoon.
     * @return oppilas tolppaeroteltuna merkkijonona 
     * @example
     * <pre name="test">
     *   Oppilas oppilas = new Oppilas();
     *   oppilas.parse("   3  |  Lmao Ayy   | 030201-111C");
     *   oppilas.toString().startsWith("3|Lmao Ayy|030201-111C|") === true; // on enemmäkin kuin 3 kenttää, siksi loppu |
     * </pre>  
     */
    @Override
    public String toString() {
        return "" +
                getId() + "|" +
                nimi + "|" +
                hetu + "|" +
                aloitusvuosi + "|" +
                katuosoite + "|" +
                postinumero + "|" +
                postiosoite + "|" +
                sahkoposti + "|" +
                puhelinnumero;
                  
    }
    
    /**
     * Selvittää oppilaan tiedot "|" erotellusta merkkijonosta
     * Pitää huolen että seuraavaNro on suurempi kuin tuleva oid.
     * @param rivi josta oppilaan tiedot otetaan
     * 
     * @example
     * <pre name="test">
     *   Oppilas oppilas = new Oppilas();
     *   oppilas.parse("   3  |  Lmao Ayy   | 030201-111C");
     *   oppilas.getId() === 3;
     *   oppilas.toString().startsWith("3|Lmao Ayy|030201-111C|") === true; // on enemmäkin kuin 3 kenttää, siksi loppu |
     *
     *   oppilas.rekisteroi();
     *   int n = oppilas.getId();
     *   oppilas.parse(""+(n+20));       // Otetaan merkkijonosta vain tunnusnumero
     *   oppilas.rekisteroi();           // ja tarkistetaan että seuraavalla kertaa tulee yhtä isompi
     *   oppilas.getId() === n+20+1;
     *     
     * </pre>
     */
    public void parse(String rivi) {
        StringBuffer sb = new StringBuffer(rivi);
        setId(Mjonot.erota(sb, '|', getId()));
        nimi = Mjonot.erota(sb, '|', nimi);
        hetu = Mjonot.erota(sb, '|', hetu);
        aloitusvuosi = Mjonot.erota(sb, '|', aloitusvuosi);
        katuosoite = Mjonot.erota(sb, '|', katuosoite);
        postinumero = Mjonot.erota(sb, '|', postinumero);
        postiosoite = Mjonot.erota(sb, '|', postiosoite);
        sahkoposti = Mjonot.erota(sb, '|', sahkoposti);
        puhelinnumero = Mjonot.erota(sb, '|', puhelinnumero);
        
    }

    /**
     * Asettaa opiskelijalle id:n (oid) ja samalla varmistaa että
     * seuraava numero on aina suurempi kuin tähän mennessä suurin.
     * @param uusiId asetettava oid
     */
    public void setId(int uusiId) {
		oid = uusiId;
		if (oid >= seuraavaNro) seuraavaNro = oid + 1;
		
	}
    
    /**
     * Tehdään identtinen klooni oppilaasta
     * @return Object kloonattu oppilas
     * @example
     * <pre name="test">
     * #THROWS CloneNotSupportedException 
     *   Oppilas oppilas = new Oppilas();
     *   oppilas.parse("   3  |  Ankka Aku   | 123");
     *   Oppilas kopio = oppilas.clone();
     *   kopio.toString() === oppilas.toString();
     *   oppilas.parse("   4  |  Ankka Tupu   | 123");
     *   kopio.toString().equals(oppilas.toString()) === false;
     * </pre>
     */
    @Override
    public Oppilas clone() throws CloneNotSupportedException {
        Oppilas uusi;
        uusi = (Oppilas) super.clone();
        return uusi;
    }
    
    /**
     * Tutkii onko oppilaantiedot samat kuin parametrina tuodun jäsenen tiedot
     * @param oppilas oppilas johon verrataan
     * @return true jos kaikki tiedot samat, false muuten
     * @example
     * <pre name="test">
     *   Oppilas jasen1 = new Oppilas();
     *   jasen1.parse("   3  |  Ankka Aku   | 030201-111C");
     *   Oppilas jasen2 = new Oppilas();
     *   jasen2.parse("   3  |  Ankka Aku   | 030201-111C");
     *   Oppilas jasen3 = new Oppilas();
     *   jasen3.parse("   3  |  Ankka Aku   | 030201-115H");
     *   
     *   jasen1.equals(jasen2) === true;
     *   jasen2.equals(jasen1) === true;
     *   jasen1.equals(jasen3) === false;
     *   jasen3.equals(jasen2) === false;
     * </pre>
     */
    public boolean equals(Oppilas oppilas) {
        for (int k = 0; k < getKenttia(); k++)
            if ( !anna(k).equals(oppilas.anna(k)) ) return false;
        return true;
    }


    @Override
    public boolean equals(Object oppilas) {
        if ( oppilas instanceof Oppilas ) return equals((Oppilas)oppilas);
        return false;
    }

    /**
     * Pääohjelma testaamista varten.
     * @param args args
     */
	public static void main(String args[]) {
        Oppilas aku = new Oppilas(), aku2 = new Oppilas();
        aku.rekisteroi();
        aku2.rekisteroi();
        aku.tulosta(System.out);
        aku.vastaaAkuAnkka();
        aku.tulosta(System.out);
      
        aku2.vastaaAkuAnkka();
        aku2.tulosta(System.out);
      
        aku2.vastaaAkuAnkka();
        aku2.tulosta(System.out);
    }

}
